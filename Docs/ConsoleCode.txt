public static int NumOfInputNeuren { get; set; }
        public static int NumOfOutputNeuren { get; set; }
        public static double[][] Weights { get; set; }
        public static double[] Bais { get; set; }
        public static double[][] Inputs { get; set; }
        public static double[][] DesiredOutput { get; set; }
        public static double Threshold { get; set; }
        public static double LearningRate { get; set; }
        public static long Epochs { get; set; }
        public static long Time { get; set; }
        public static bool isTrained { get; set; }
        public static int Cycle { get; set; }
        public static Random RandomObj { get; set; }
   //     static double threshold = 0;
        static void Main(string[] args)
        {
            #region e
            /*
                        Random r = new Random();
                        inputs[0] = new int[2];
                        inputs[1] = new int[2];
                        inputs[2] = new int[2];
                        inputs[0][0] = 1;
                        inputs[0][1] = 2;
                        inputs[1][0] = -1;
                        inputs[1][1] = 2;
                        inputs[2][0] = 0;
                        inputs[2][1] = -1;
                        int p = outputs.Length;//ÚÏÏ äãÇĞÌ ÇáÊÏÑíÈ
                        int epoch = 10;
                        int n = inputs[0].Length;//ÚÏÏ ÇáãÇÎá
                        int lrate = 1;
                        weights[0] = 1.0;
                        weights[1] = 0.8;
                        //for (int i = 0; i < 2; i++)
                        //{
                        //    weights[i] = r.NextDouble();
                        //}
                        double totalError=0;
                        int i = 0;
                        for ( i = 0; i < epoch; i++)
                        {
                             totalError = 0;
                            for (int j = 0; j < p; j++)
                            {
                                int o = Output(inputs[j]);
                                int error = outputs[j] - o;

                                totalError += error;

                                for (int k = 0; k < n; k++)
                                {
                                    double delta = lrate * inputs[j][k] * error;
                                    weights[k] += delta;
                                }
                            }

                            if (totalError== 0)
                                break;
                        }
                        Console.WriteLine(i);
                        for ( i = 0; i < 2; i++)
                        {
                            Console.WriteLine(weights[i]);
                        }
                        Console.WriteLine(inputs.Length);
                        */
            #endregion
            NumOfInputNeuren = 2;
            NumOfOutputNeuren = 1;
            Epochs = 1000;
            Threshold =0.6 ;
            LearningRate = 0.1;
            RandomObj = new Random();
            Bais = new double[1];
            Bais[0] =0.2;
            Weights = new double[2][];
            Weights[0] = new double[1] {RandomObj.NextDouble()};
            Weights[1] = new double[1] {RandomObj.NextDouble()};




            Inputs = new double[4][];//ÚÏÏ äãÇĞÌ ÇáÊÏÑíÈ
            Inputs[0] = new double[] { 0 ,0 };
            Inputs[1] = new double[] { 0, 1 };
            Inputs[2] = new double[] { 1, 0 };
            Inputs[3] = new double[] { 1, 1 };


            DesiredOutput = new double[4][];
            DesiredOutput[0] = new double[1] {0};
            DesiredOutput[1] = new double[1] {1};
            DesiredOutput[2] = new double[1] {1};
            DesiredOutput[3] = new double[1] {1};

            int theNumberOfSampleTrainingSet = Inputs.Length;//ÚÏÏ äãÇĞÌ ÇáÊÏÑíÈ
            double totalError = 0;
            int i = 0;
            for (i = 0; i < Epochs; i++)
            {
                totalError = 0;
                for (int j = 0; j < theNumberOfSampleTrainingSet; j++)
                {
                    for (int k = 0; k < NumOfOutputNeuren; k++)
                    {
                        double output = BipolarBinaryOutput(Inputs[j], k);
                        double error = DesiredOutput[j][k] - output;
                     totalError += error;
                            for (int l = 0; l < NumOfInputNeuren; l++)
                            {
                                double delta = LearningRate * Inputs[j][l] * error;
                                Weights[l][k] += delta;
                            }
                       if(error!=0) Bais[k] = Bais[k] + LearningRate * DesiredOutput[j][k];
                    }
                }

                if (totalError == 0)
                    break;
            }
            Console.WriteLine(i+"Epoch");
            Console.WriteLine(BipolarBinaryOutput(Inputs[0], 0) + "************************1");
            Console.WriteLine(BipolarBinaryOutput(Inputs[1], 0) + "************************2");
            Console.WriteLine(BipolarBinaryOutput(Inputs[2], 0) + "************************3");
            Console.WriteLine(BipolarBinaryOutput(Inputs[3], 0) + "************************4");
            Console.WriteLine(BipolarBinaryOutput(new double[2] {0.3,0.3 }, 0) + "************************4");
            Console.WriteLine(Bais[0]);
            Console.WriteLine(Weights[0][0] + "  " + Weights[1][0]);

            //if (totalError == 0) isTrained = true;
            //for (int j = 0; j < 2; j++)
            //{
            //    for (int k = 0; k <4 ; k++)
            //    {
            //       // Console.WriteLine(Weights[j][k]);
            //    }
            //}
            Console.ReadLine();
        }
        public static double BipolarBinaryOutput(double[] input, int k)
        {
            double sum = 0.0;
            for (int i = 0; i < input.Length; i++)
            {
                sum += Weights[i][k] * input[i] ;
            }
            sum= sum + Bais[k];
            if (sum > Threshold)
                return 1;
            else
                return 0;
        }
        